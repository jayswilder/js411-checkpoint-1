{"version":3,"sources":["components/MenuBar.js","components/Dashboard.js","components/LogoutButton.js","App.js","reportWebVitals.js","index.js"],"names":["MenuBar","AppBar","position","Toolbar","Typography","component","valuetext","value","Dashboard","props","setOnline","setState","online","state","setVolume","event","volume","setQuality","quality","target","componentDidUpdate","prevProps","prevState","tempNotifications","push","notifications","length","className","variant","color","Card","CardContent","fontWeight","CardActions","Switch","checked","this","onChange","Slider","getAriaValueText","aria-labelledby","valueLabelDisplay","marks","step","min","max","Select","MenuItem","map","notification","index","React","Component","logout","window","location","reload","console","log","LogoutButton","Button","id","onClick","useStyles","makeStyles","root","display","justifyContent","alignItems","height","width","marginTop","padding","bullet","margin","transform","title","fontSize","pos","marginBottom","App","classes","useState","loggedIn","setLogin","onSubmit","TextField","label","type","name","required","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0b3009bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { AppBar, Typography, Toolbar } from '@material-ui/core';\r\n\r\nconst MenuBar = () => {\r\n    return (\r\n        <div>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar>\r\n                    <Typography component=\"h1\">\r\n                        My Music App\r\n            </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MenuBar;","import React from 'react';\r\nimport { Card, CardContent, CardActions, Typography, Switch, Slider, Select, MenuItem } from '@material-ui/core';\r\n\r\nfunction valuetext(value) {\r\n    return `${value}Â°C`;\r\n}\r\n\r\nclass Dashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            online: true,\r\n            volume: 40,\r\n            quality: 2,\r\n            notifications: []\r\n        }\r\n    }\r\n\r\n    setOnline = () => {\r\n        this.setState({\r\n            online: !this.state.online\r\n        });\r\n    }\r\n\r\n    setVolume = (event, value) => {\r\n        this.setState({\r\n            volume: value\r\n        });\r\n    }\r\n\r\n    setQuality = (event) => {\r\n        this.setState({\r\n            quality: event.target.value\r\n        });\r\n    }\r\n\r\n    componentDidUpdate = (prevProps, prevState) => {\r\n        let tempNotifications = [];\r\n        if (this.state.online === false) {\r\n            tempNotifications.push(\"Your application is offline. You won't be able to share or stream music to other devices.\");\r\n        }\r\n        if (this.state.volume >= 80) {\r\n            tempNotifications.push(\"Listening to music at a high volume could cause long-term hearing loss.\");\r\n        }\r\n        if (this.state.quality === 1) {\r\n            tempNotifications.push(\"Music quality is degraded. Increase quality if your connection allows it.\");\r\n        }\r\n        if (prevState.notifications.length !== tempNotifications.length) {\r\n            this.setState({\r\n                notifications: tempNotifications\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard-container\">\r\n\r\n                <div className=\"welcome-header\">\r\n                    <Typography component=\"h2\" variant=\"h3\" color=\"textSecondary\">Welcome User!</Typography>\r\n                </div>\r\n\r\n                <div className=\"cards-container\">\r\n                    <Card className=\"card\">\r\n                        <CardContent>\r\n                            <Typography component=\"h4\" fontWeight=\"fontWeightBold\">\r\n                                Online Mode\r\n              </Typography>\r\n                            <br />\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                Is this application connected to the internet?\r\n              </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Switch\r\n                                checked={this.state.online}\r\n                                onChange={this.setOnline}\r\n                                value={this.state.online}\r\n                            />\r\n                        </CardActions>\r\n                    </Card>\r\n\r\n                    <Card className=\"card\">\r\n                        <CardContent>\r\n                            <Typography component=\"h4\" fontWeight=\"fontWeightBold\">\r\n                                Master Volume\r\n              </Typography>\r\n                            <br />\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                Overrides all other sound settings in this application\r\n              </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Slider\r\n                                getAriaValueText={valuetext}\r\n                                aria-labelledby=\"discrete-slider\"\r\n                                valueLabelDisplay=\"auto\"\r\n                                marks={true}\r\n                                step={10}\r\n                                min={0}\r\n                                max={100}\r\n                                onChange={this.setVolume}\r\n                                value={this.state.volume}\r\n                            />\r\n                        </CardActions>\r\n                    </Card>\r\n\r\n                    <Card className=\"card\">\r\n                        <CardContent>\r\n                            <Typography component=\"h4\" fontWeight=\"fontWeightBold\">\r\n                                Sound Quality\r\n              </Typography>\r\n                            <br />\r\n                            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                                Manually control the music quality in event of poor connection\r\n              </Typography>\r\n                        </CardContent>\r\n                        <CardActions>\r\n                            <Select value={this.state.quality} onChange={this.setQuality}>\r\n                                <MenuItem value={1}>Low</MenuItem>\r\n                                <MenuItem value={2}>Normal</MenuItem>\r\n                                <MenuItem value={3}>High</MenuItem>\r\n                            </Select>\r\n                        </CardActions>\r\n                    </Card>\r\n                </div>\r\n\r\n                <div className=\"notifications-container\">\r\n                    <Typography component=\"h3\" variant=\"h6\">System Notifications:</Typography>\r\n                    <div>\r\n                        {this.state.notifications.map((notification, index) => (\r\n                            <p key={index}>\r\n                                {notification}\r\n                            </p>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Dashboard;","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nconst logout = (event) => {\r\n    window.location.reload();\r\n    console.log('clicked')\r\n}\r\nconst LogoutButton = () => {\r\n    return (\r\n        <Button variant=\"contained\" id='logout' onClick={logout}>\r\n            Logout\r\n        </Button>\r\n    )\r\n}\r\n\r\nexport default LogoutButton","import React, { useState } from 'react';\nimport { TextField, Button, Card, CardContent, makeStyles } from '@material-ui/core';\nimport MenuBar from './components/MenuBar';\nimport Dashboard from './components/Dashboard';\nimport './App.css';\nimport LogoutButton from './components/LogoutButton';\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 400,\n    width: 500,\n    marginTop: 50,\n    padding: 10\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst App = () => {\n\n  const classes = useStyles();\n  const [loggedIn, setLogin] = useState(false)\n\n  const login = (event) => {\n    setLogin(true)\n  }\n\n  return (\n    <div>\n      <MenuBar />\n      <div id='container'>\n        {loggedIn ? <div><LogoutButton /><br></br><br></br><Dashboard /></div> : (\n          <Card className={classes.root} variant=\"outlined\">\n            <CardContent className=\"form-container\">\n              <div id=\"login-page-photo\">Sign In</div><br></br>\n              <div>\n                <form id=\"login-form\" onSubmit={login}>\n                  <TextField\n                    label=\"Enter Username\"\n                    type=\"text\"\n                    name=\"username\"\n                    required\n                  /> <br></br>\n                  <TextField\n                    label=\"Enter Password\"\n                    type=\"password\"\n                    name=\"password\"\n                    required\n                  />\n                  <br />\n                  <Button variant=\"contained\" color=\"primary\" type=\"submit\">Log In</Button>\n                </form>\n              </div>\n            </CardContent>\n          </Card >\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}